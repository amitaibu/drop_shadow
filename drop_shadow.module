<?php
/* $Id: rounded_corners.module,v 1.1.4.1 2009/07/24 09:54:53 yhager Exp $ */

/**
 * @file
 * Add dropped shadows by jQuery.
 */

/**
 * Add the drop shadow jQuery plugin.
 *
 * This function can be called many times, but the plugin will be added only
 * once.
 */
function drop_shadow_add_js() {
  static $added = FALSE;
  if (!$added) {
    drupal_add_js(drupal_get_path('module', 'drop_shadow') . '/jquery.dropshadow.js');
    $added = TRUE;
  }
}

/**
 * API function to add drop shadows on a page.
 *
 * @code
 *   // foo class will get default drop shadow.
 *   $commands[] = array('selector' => '.foo');
 *
 *   $commands[] = array(
 *     'selector' => '#bar'
 *     'left' => 4,
 *     'top' => 4,
 *     'blur' => 2,
 *     'opacity' => 0.5,
 *     'color' => 'black',
 *     'swap' => FALSE,
 *   );
 *
 *   drop_shadow_add_shadow($commands);
 * @endcode
 *
 * @param $options
 *  Array of keyed arrays with the following keys:
 *  - selector: The CSS selector. This can be any selector jquery uses in $().
 *  - left: The left and top parameters specify the distance and direction, in
 *    pixels, to offset the shadow. Zero values position the shadow directly
 *    behind the element. Positive values shift the shadow to the right and
 *    down, while negative values shift the shadow to the left and up.
 *  - top: See the left property.
 *  - blur: The blur parameter specifies the spread, or dispersion, of the
 *    shadow. Zero produces a sharp shadow, one or two produces a normal shadow,
 *    and three or four produces a softer shadow. Higher values increase the
 *    processing load.
 *  - opacity: The opacity parameter should be a decimal value, usually less
 *    than one. You can use a value higher than one in special situations, e.g.
 *    with extreme blurring.
 *  - color: Color is specified in the usual manner, with a color name or hex
 *    value. The color parameter does not apply with transparent images.
 *  - swap: The swap parameter reverses the stacking order of the original and
 *    the shadow. This can be used for special effects, like an embossed or
 *    engraved look.
 */
function drop_shadow_add_shadow($commands = array()) {
  static $added = FALSE;
  if (!$added) {
    // Add our JS file.
    drupal_add_js(drupal_get_path('module', 'drop_shadow') . '/drop_shadow.js');

    // Add the corner JS plugin.
    drop_shadow_add_js();
    $added = TRUE;
  }

  $settings = array('drop_shadow' => array());

  foreach ($commands as $command) {
    if (!empty($command['selector'])) {
      // Add default values.
      $command += array(
        'left' => 4,
        'top' => 4,
        'blur' => 2,
        'opacity' => 0.5,
        'color' => 'black',
        'swap' => FALSE,
      );
      $settings['drop_shadow'][] = $command;
    }
  }

  drupal_add_js($settings, 'setting');
}

/**
 * Implementation of hook_init().
 *
 * Add round corners on the top of the message area.
 */
function drop_shadow_init() {
  $commands = array();
  $commands[] = array('selector' => '.messages', 'left' => 2, 'top' => 2);
  $commands[] = array('selector' => '#edit-search-theme-form-1');
  // Add the rounded corners.
  drop_shadow_add_shadow($commands);


  $commands = array();
  $commands[] = array('selector' => '.messages');
  $commands[] = array('selector' => '.right-corner .dropShadow');
  // Add the rounded corners.
  rounded_corners_add_corners($commands);



  // Add an example message.
  drupal_set_message(t('This message should have drop shadows.'));
}